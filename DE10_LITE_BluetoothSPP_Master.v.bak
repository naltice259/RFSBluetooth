
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE_BluetoothSPP_Master(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,


	//////////// GPIO, GPIO connect to RFS - RF and Sensor //////////
	inout 		          		BT_KEY,
	input 		          		BT_UART_RX,
	output		          		BT_UART_TX,
	input 		          		LSENSOR_INT,
	inout 		          		LSENSOR_SCL,
	inout 		          		LSENSOR_SDA,
	output		          		MPU_AD0_SDO,
	output		          		MPU_CS_n,
	output		          		MPU_FSYNC,
	input 		          		MPU_INT,
	inout 		          		MPU_SCL_SCLK,
	inout 		          		MPU_SDA_SDI,
	input 		          		RH_TEMP_DRDY_n,
	inout 		          		RH_TEMP_I2C_SCL,
	inout 		          		RH_TEMP_I2C_SDA,
	inout 		     [7:0]		TMD_D,
	input 		          		UART2USB_CTS,
	output		          		UART2USB_RTS,
	input 		          		UART2USB_RX,
	output		          		UART2USB_TX,
	output		          		WIFI_EN,
	output		          		WIFI_RST_n,
	input 		          		WIFI_UART0_CTS,
	output		          		WIFI_UART0_RTS,
	input 		          		WIFI_UART0_RX,
	output		          		WIFI_UART0_TX,
	input 		          		WIFI_UART1_RX
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire tx;
wire rx;
wire Control;

assign  rx = BT_UART_RX;
assign  BT_UART_TX  = tx;
assign  BT_KEY = Control;

//=======================================================
//  Structural coding
//=======================================================

    Qsys u0 (
        .clk_clk                            (MAX10_CLK1_50),                            //                            clk.clk
        .reset_reset_n                      (KEY[0]),                      //                          reset.reset_n
        .clk_sdram_clk                      (DRAM_CLK),                           //                        clk_sdram.clk
		   // SDRAM
		  .sdram_wire_addr                       (DRAM_ADDR),					// sdram_wire.addr
		  .sdram_wire_ba                         (DRAM_BA),						//           .ba
		  .sdram_wire_cas_n                      (DRAM_CAS_N),					//           .cas_n
		  .sdram_wire_cke                        (DRAM_CKE),						//           .cke
		  .sdram_wire_cs_n                       (DRAM_CS_N),					//           .cs_n
		  .sdram_wire_dq                         (DRAM_DQ),						//           .dq
		  .sdram_wire_dqm                        ({DRAM_UDQM,DRAM_LDQM}),	//           .dqm
		  .sdram_wire_ras_n								(DRAM_RAS_N),					//           .ras_n
		  .sdram_wire_we_n								(DRAM_WE_N),					//           .we_n
        
		  .altpll_0_areset_conduit_export          (),          //          altpll_0_areset_conduit.export
        .altpll_0_locked_conduit_export          (),           //          altpll_0_locked_conduit.export
		  
		  .hc_05_uart_external_connection_rxd (rx), // hc_05_uart_external_connection.rxd
        .hc_05_uart_external_connection_txd (tx), //                               .txd
		  .pio_key_external_connection_export (KEY[1]),  //    pio_key_external_connection.export
        .gpio_controller_external_connection_export (Control)  // gpio_controller_external_connection.export

	 );

endmodule
